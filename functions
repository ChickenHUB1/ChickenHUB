--local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Version = loadstring(game:HttpGet('https://raw.githubusercontent.com/ChickenHUB1/ChickenHUB/refs/heads/main/Version'))()

local VersionCheckCooldown = false

local f = {}

function f.game8200787440(Window, Rayfield) -- eat blobs simulator
	local Tab = Window:CreateTab("Eat Blobs Simulator", nil) -- Title, Image
	local Enabled = false
	local KillAll = false

	local function CollectOrbs()
		if Enabled == false then
			return
		end

		while Enabled == true and wait() do
			for _,v in pairs(workspace.Orbs:GetChildren()) do
				if Enabled == false then
					break
				end

				if Enabled == true then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0, -1, 0)
					wait(0.1)
				else
					break
				end
			end
		end
	end

	local function KillAllFunc()
		if KillAll == false then
			return
		end

		while KillAll == true and wait() do
			for _, v in pairs(game.Players:GetPlayers()) do
				local Character = v.Character
				local HRP = Character:FindFirstChild("HumanoidRootPart")

				if KillAll == false then
					break
				end

				if Character and HRP then
					local RealSizeValue = HRP:FindFirstChild("RealSize")

					if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("RealSize").Value > RealSizeValue.Value then
						game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = HRP.CFrame
					end
				end

				wait(0.25)
			end
		end
	end

	local AutoCollectOrbsToggle = Tab:CreateToggle({
		Name = "Auto Collect Orbs",
		CurrentValue = false,
		Flag = "CollectOrbsToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			Enabled = Value

			f:CheckVersion(Rayfield)

			if Enabled then
				Rayfield:Notify({
					Title = "Notification",
					Content = "Activated.",
					Duration = 2.5
				})
			else
				Rayfield:Notify({
					Title = "Notification",
					Content = "Deactivated.",
					Duration = 2.5
				})
			end

			CollectOrbs()
		end,
	})
	local KillAllToggle = Tab:CreateToggle({
		Name = "Kill All",
		CurrentValue = false,
		Flag = "KillAllToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			KillAll = Value

			--print(KillAll, Value)

			KillAllFunc()
		end,
	})

	local Slider = Tab:CreateSlider({
		Name = "Walkspeed",
		Range = {16, 500},
		Increment = 1,
		Suffix = "Walkspeed",
		CurrentValue = 16,
		Flag = "WalkspeedSlider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value   -- The variable (Value) is a number which correlates to the value the slider is currently at
		end,
	})
end

function f.game18180213499(Window, Rayfield)
	local Tab = Window:CreateTab("Be a Hole", nil)

	local CollectEverything = Tab:CreateButton({
		Name = "Collect everything",

		Callback = function()
			f:CheckVersion(Rayfield)

			local player = game.Players.LocalPlayer
			local character = player.Character

			if player and character then
				character:FindFirstChild("Size").Value = 2^9999
			end
		end,
	})
end

function f.game142823291(Window, Rayfield)
	local Tab = Window:CreateTab("Murder Mystery 2", nil)
	local MurderSection = Tab:CreateSection("Murderer")

	local KillMurdererCooldown = false
	local ESPActivated = false
	local GunESP = false
	
	local DeathConnections = {}
	
	local function CreateHighlights()
		while ESPActivated and task.wait(0.1) do
			if not ESPActivated then
				break
			end
			
			for _,target in pairs(game.Players:GetPlayers()) do
				local Char = target and target.Character

				if Char and not(Char:FindFirstChild("ESPHighlight")) then
					local ESPHighlight = Instance.new("Highlight")
					ESPHighlight.Name = "ESPHighlight"
					ESPHighlight.OutlineColor = Color3.fromRGB(255, 255, 255)
					ESPHighlight.Parent = Char

					if target == game.Players.LocalPlayer or target.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then
						ESPHighlight:Destroy()
					end

					if target.Backpack:FindFirstChild("Knife") or Char:FindFirstChild("Knife") then
						ESPHighlight.FillColor = Color3.fromRGB(255, 0, 0)
					elseif target.Backpack:FindFirstChild("Gun") or target:FindFirstChild("Gun") then
						ESPHighlight.FillColor = Color3.fromRGB(0, 0, 255)
					else
						ESPHighlight.FillColor = Color3.fromRGB(0, 255, 0)
					end

					DeathConnections[#DeathConnections+1] = target.CharacterAdded:Connect(function()
						local ESPHighlight = Instance.new("Highlight")
						ESPHighlight.Name = "ESPHighlight"
						ESPHighlight.OutlineColor = Color3.fromRGB(255, 255, 255)
						ESPHighlight.Parent = Char

						if target.Backpack:FindFirstChild("Knife") or Char:FindFirstChild("Knife") then
							ESPHighlight.FillColor = Color3.fromRGB(255, 0, 0)
						elseif target.Backpack:FindFirstChild("Gun") or target:FindFirstChild("Gun") then
							ESPHighlight.FillColor = Color3.fromRGB(0, 0, 255)
						else
							ESPHighlight.FillColor = Color3.fromRGB(0, 255, 0)
						end
					end)
				end
			end
		end
	end
	local function RemoveHighlights()
		for _,target in pairs(game.Players:GetPlayers()) do
			local Char = target and target.Character

			if Char and Char:FindFirstChild("ESPHighlight") then
				local Highlight = Char:FindFirstChild("ESPHighlight")
				Highlight:Destroy()
			end
		end
		
		DeathConnections = {}
	end

	local InnocentSection = Tab:CreateSection("Innocent")
	local ESPAll = Tab:CreateToggle({
		Name = "ESP",
		CurrentValue = false,
		Flag = "MM2ESP1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			
			ESPActivated = Value
			
			if ESPActivated then
				CreateHighlights()
			else
				RemoveHighlights()
			end
		end,
	})
	local GunESP = Tab:CreateToggle({
		Name = "Gun ESP",
		CurrentValue = false,
		Flag = "MM2ESP2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			
			GunESP = Value
			
			if GunESP then
				--
			end
		end,
	})
	local KillMurdererButton = Tab:CreateButton({
		Name = "Kill murderer",

		Callback = function()
			f:CheckVersion(Rayfield)
			
			if KillMurdererCooldown == false then
				KillMurdererCooldown = true

				local Character = game.Players.LocalPlayer.Character
				local Murderer: Player

				local Thrust = Instance.new("BodyAngularVelocity")
				Thrust.Parent = Character:FindFirstChild("HumanoidRootPart")
				Thrust.MaxTorque = Vector3.new(0,2^9999,0)
				Thrust.P = 2^9999
				local Thrust2 = Instance.new("BodyThrust")
				Thrust2.Parent = Character:FindFirstChild("HumanoidRootPart")
				Thrust2.Force = Vector3.new(9999,0,9999)

				for _,tplayer in pairs(game.Players:GetPlayers()) do
					if tplayer and tplayer.Character then
						local KnifeChar = tplayer.Character:FindFirstChild("Knife")
						local KnifeBackpack = tplayer.Backpack:FindFirstChild("Knife")

						if KnifeChar or KnifeBackpack then
							Murderer = tplayer

							break
						end
					end
				end
				
				if Murderer == game.Players.LocalPlayer then
					Rayfield:Notify({
						Title = "Notification",
						Content = "Can't target yourself.",
						Duration = 2.5
					})
					
					Thrust:Destroy()
					Thrust2:Destroy()

					return
				end

				if Murderer == nil then
					KillMurdererCooldown = false
					Thrust:Destroy()
					Thrust2:Destroy()
					return
				end

				Rayfield:Notify({
					Title = "Notification",
					Content = "Now targeting "..Murderer.Name.."...",
					Duration = 2.5
				})
				
				workspace.CurrentCamera.CameraSubject = Murderer.Character:FindFirstChildOfClass("Humanoid")

				while task.wait() do
					local MurdererChar = Murderer.Character

					--if not((MurdererChar or MurdererChar:FindFirstChild("HumanoidRootPart").CFrame) or (Character or Character:FindFirstChild("HumanoidRootPart").CFrame)) then
					--Thrust:Destroy()
					--break
					--end

					if (MurdererChar:FindFirstChildOfClass("Humanoid").Health or Character:FindFirstChildOfClass("Humanoid").Health) <= 0 then
						break
					end

					local s, f = pcall(function()
						Character:FindFirstChild("HumanoidRootPart").CFrame = MurdererChar:FindFirstChild("HumanoidRootPart").CFrame
						Thrust2.Location = MurdererChar:FindFirstChild("HumanoidRootPart").Position
						Character:FindFirstChildOfClass("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Seated, true)

						Thrust.AngularVelocity = Vector3.new(0,9999,0)
						task.wait()
						Thrust.AngularVelocity = Vector3.new(0,0,0)
					end)

					if f then
						break
					end

					if not (Murderer.Character:FindFirstChild("Head")) then
						Thrust:Destroy()
						Thrust2:Destroy()
						break
					end

					game:FindService("RunService").Heartbeat:Wait()
				end
				Thrust:Destroy()
				Thrust2:Destroy()

				KillMurdererCooldown = false
			end
		end,
	})
	local GrabGun = Tab:CreateButton({
		Name = "Grab gun",

		Callback = function()
			f:CheckVersion(Rayfield)
			
			local Gun

			for _,part in pairs(workspace:GetDescendants()) do
				if part:IsA("BasePart") and part.Name == "GunDrop" then
					Gun = part

					break
				end
			end

			if Gun then
				local LPCharCFrame = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
				local LPChar = game.Players.LocalPlayer.Character

				Rayfield:Notify({
					Title = "Notification",
					Content = "Gun found dropped, grabbing...",
					Duration = 2.5
				})

				LPChar:FindFirstChild("HumanoidRootPart").CFrame = Gun.CFrame
				task.wait(0.175)
				LPChar:FindFirstChild("HumanoidRootPart").CFrame = LPCharCFrame

				Rayfield:Notify({
					Title = "Notification",
					Content = "Grabbed gun.",
					Duration = 2.5
				})
			end

			for _,tplayer in pairs(game.Players:GetPlayers()) do
				if tplayer and tplayer.Character then
					local GunChar = tplayer.Character:FindFirstChild("Gun")
					local GunBackpack = tplayer.Backpack:FindFirstChild("Gun")

					if GunChar or GunBackpack then
						Rayfield:Notify({
							Title = "Notification",
							Content = "Gun is already in a players inventory.",
							Duration = 2.5
						})

						break
					end
				end

				wait()
			end
		end,
	})
end

local UniversalAlreadyLoaded = false

function f.Universal(Window, Rayfield)
	local Tab = Window:CreateTab("Universal", nil)

	local EnabledWalk = false
	local EnabledJump = false

	local WalkToggle = Tab:CreateToggle({
		Name = "Walkspeed",
		CurrentValue = false,
		Flag = "WalkspeedToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			EnabledWalk = Value
		end,
	})
	local JumpToggle = Tab:CreateToggle({
		Name = "Jumppower",
		CurrentValue = false,
		Flag = "JumppowerToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			EnabledJump = Value
		end,
	})

	local WalkSpeedSlider = Tab:CreateSlider({
		Name = "Walkspeed",
		Range = {16, 500},
		Increment = 1,
		Suffix = "Walkspeed",
		CurrentValue = 16,
		Flag = "WalkspeedSlider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)

			if EnabledWalk then
				game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
			end
		end,
	})
	local JumpPowerSlider = Tab:CreateSlider({
		Name = "Jump power",
		Range = {50, 500},
		Increment = 1,
		Suffix = "JumpPower",
		CurrentValue = 50,
		Flag = "JumpPowerSlider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)

			if EnabledJump then
				game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
			end
		end,
	})

	UniversalAlreadyLoaded = true
end

function f:LoadExtra(Window, Rayfield)
	local ChangelogTab = Window:CreateTab("Changelog", nil)
	local ExtraTab = Window:CreateTab("Extra", nil)
	
	local Date12_21_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/21/24",
		Content = "'Murder Mystery 2' kill murderer has been updated high chance of actually killing the murderer (flings)"
	})
	local Date12_20_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/20/24",
		Content = "Added new whitelisted game, 'Murder Mystery 2'. Grab gun, kill murderer."
	})
	local Date12_19_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/19/24",
		Content = "Added new whitelisted game, 'Be a Hole'. Added collect everything to 'Be a Hole' tab. Made versions, lets you know if your hub is outdated."
	})
	local Date12_18_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/18/24",
		Content = "Added universal, finished 'Eat Blobs Simulator' scripts."
	})
	local Date_12_16_24 = ChangelogTab:CreateParagraph({
		Title = "Testing - 12/16/24",
		Content = "Everything in 'Eat Blobs Simulator' was starting to be made."
	})

	local LoadUniversalTabButton = ExtraTab:CreateButton({
		Name = "Load universals.",

		Callback = function()
			f:CheckVersion(Rayfield)
			
			if UniversalAlreadyLoaded == false then
				f.Universal(Window)
			else
				Rayfield:Notify({
					Title = "Notification",
					Content = "Already have a 'Universal' tab created.",
					Duration = 2.5
				})
			end
		end,
	})
	local UniversalButtonParagraph = ExtraTab:CreateParagraph({
		Title = "⚠WARNING⚠",
		Content = "Using the universal scripts inside of a game could and can get you banned from some games with anti-cheat."
	})
end

function f:CheckVersion(Rayfield)
	if VersionCheckCooldown == false then
		VersionCheckCooldown = true

		local OldVersion = Version
		local NewVersion = loadstring(game:HttpGet('https://raw.githubusercontent.com/ChickenHUB1/ChickenHUB/refs/heads/main/Version'))()

		print("Old version is "..OldVersion.." and new version is "..NewVersion)

		if NewVersion ~= OldVersion then
			Rayfield:Notify({
				Title = "Version Notification",
				Content = "This is now an outdated version of ChickenHUB, please re-execute to get the newest version. You can still USE this version, there might be some bugs, or issues.",
				Duration = 10
			})
		end

		task.wait(30)

		VersionCheckCooldown = false
	else
		return
	end
end

function f:RunFunction(placeid, Window, Rayfield)
	if placeid then
		f["game"..placeid](Window, Rayfield)
	else
		Rayfield:Notify({
			Title = "PlaceID - ERROR",
			Content = "An internal error had occured. If this is reoccuring, contact script publishers.",
			Duration = 7.5
		})
		Rayfield:Notify({
			Title = "Notification",
			Content = "Now loading universal.",
			Duration = 7.5
		})

		f.Universal(Window, Rayfield)
	end

	f:LoadExtra(Window, Rayfield)
end

return f

--local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Version = loadstring(game:HttpGet('https://raw.githubusercontent.com/ChickenHUB1/ChickenHUB/refs/heads/main/Version'))()
local WhitelistedGamesTable = loadstring(game:HttpGet('https://raw.githubusercontent.com/ChickenHUB1/ChickenHUB/refs/heads/main/whitelistedplaceids'))()

local VersionCheckCooldown = false

local f = {}

function f.game8200787440(Window, Rayfield) -- eat blobs simulator
	local Tab = Window:CreateTab("Eat Blobs Simulator", nil) -- Title, Image
	local Enabled = false
	local KillAll = false

	local function CollectOrbs()
		if Enabled == false then
			return
		end

		while Enabled == true and wait() do
			for _,v in pairs(workspace.Orbs:GetChildren()) do
				if Enabled == false then
					break
				end

				if Enabled == true then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0, -1, 0)
					wait(0.1)
				else
					break
				end
			end
		end
	end

	local function KillAllFunc()
		if KillAll == false then
			return
		end

		while KillAll == true and wait() do
			for _, v in pairs(game.Players:GetPlayers()) do
				local Character = v.Character
				local HRP = Character:FindFirstChild("HumanoidRootPart")

				if KillAll == false then
					break
				end

				if Character and HRP then
					local RealSizeValue = HRP:FindFirstChild("RealSize")

					if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("RealSize").Value > RealSizeValue.Value then
						game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = HRP.CFrame
					end
				end

				wait(0.25)
			end
		end
	end

	local AutoCollectOrbsToggle = Tab:CreateToggle({
		Name = "Auto Collect Orbs",
		CurrentValue = false,
		Flag = "CollectOrbsToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			Enabled = Value

			f:CheckVersion(Rayfield)

			if Enabled then
				Rayfield:Notify({
					Title = "Notification",
					Content = "Activated.",
					Duration = 2.5
				})
			else
				Rayfield:Notify({
					Title = "Notification",
					Content = "Deactivated.",
					Duration = 2.5
				})
			end

			CollectOrbs()
		end,
	})
	local KillAllToggle = Tab:CreateToggle({
		Name = "Kill All",
		CurrentValue = false,
		Flag = "KillAllToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			KillAll = Value

			--print(KillAll, Value)

			KillAllFunc()
		end,
	})

	local Slider = Tab:CreateSlider({
		Name = "Walkspeed",
		Range = {16, 500},
		Increment = 1,
		Suffix = "Walkspeed",
		CurrentValue = 16,
		Flag = "WalkspeedSlider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value   -- The variable (Value) is a number which correlates to the value the slider is currently at
		end,
	})
end

function f.game18180213499(Window, Rayfield)
	local Tab = Window:CreateTab("Be a Hole", nil)

	local CollectEverything = Tab:CreateButton({
		Name = "Collect everything",

		Callback = function()
			f:CheckVersion(Rayfield)

			local player = game.Players.LocalPlayer
			local character = player.Character

			if player and character then
				character:FindFirstChild("Size").Value = 2^999
			end
		end,
	})
end

function f.game142823291(Window, Rayfield)
	local Tab = Window:CreateTab("Murder Mystery 2", nil)
	local MurderSection = Tab:CreateSection("Murderer")

	local KillMurdererCooldown = false
	local ESPActivated = nil
	local CoinAutoFarm = false

	local JoinConnection = nil
	local DeathConnections = {}

	local function NewHighlight(Character: Model, target: Player)
		if not Character then return warn("No character provided") end
		if not target then return end
		if target == game.Players.LocalPlayer then return end

		if Character and not Character:FindFirstChild("ESPHighlight") then
			ESPHighlight = Instance.new("Highlight")
			ESPHighlight.Name = "ESPHighlight"
			ESPHighlight.OutlineColor = Color3.fromRGB(0, 0, 0)
			ESPHighlight.FillColor = Color3.fromRGB(0, 255, 0)
			ESPHighlight.Parent = Character
		else
			if ESPHighlight and (target.Backpack:FindFirstChild("Knife") or Char:FindFirstChild("Knife")) then
				ESPHighlight.FillColor = Color3.fromRGB(255, 0, 0)
			elseif ESPHighlight and target.Backpack:FindFirstChild("Gun") or target.Character:FindFirstChild("Gun") then
				ESPHighlight.FillColor = Color3.fromRGB(0, 0, 255)
			else
           		ESPHighlight.FillColor = Color3.fromRGB(0, 255, 0)
			end
		end

		if Character and not Character:FindFirstChild("NameTag") then
			NameTag = Instance.new("BillboardGui")
			NameTag.Size = UDim2.fromScale(10, 1.75)
			NameTag.AlwaysOnTop = true
			NameTag.Name = "NameTag"
			NameTag.StudsOffsetWorldSpace = Vector3.new(0, 3, 0)
			NameTag.Parent = Character:FindFirstChild("Head")

			NameLabel = Instance.new("TextLabel")
			NameLabel.Size = UDim2.fromScale(1, 1)
			NameLabel.Text = Character.Name
			NameLabel.TextScaled = true
			NameLabel.BackgroundTransparency = 1
			NameLabel.Font = Enum.Font.Arial
			NameLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
			NameLabel.Name = "NameLabel"
			NameLabel.Parent = NameTag
		end

		return {Character:FindFirstChild("ESPHighlight"), Character:FindFirstChild("NameTag")}
	end
	
	local function CreateHighlights()
		while ESPActivated == true and task.wait(1) do
			if ESPActivated == false then
				break
			end
			
			for _, target in pairs(game.Players:GetPlayers()) do
				local Char = target and target.Character
				local Head = Char and Char:FindFirstChild("Head")

				if Char and target ~= game.Players.LocalPlayer then
					local ESPHighlight: Highlight, NameTag = NewHighlight(Char, target)

					if ESPHighlight and NameTag and target == game.Players.LocalPlayer then
						ESPHighlight:Destroy()
						NameTag:Destroy()
					end

					if ESPHighlight and (target.Backpack:FindFirstChild("Knife") or Char:FindFirstChild("Knife")) then
						ESPHighlight.FillColor = Color3.fromRGB(255, 0, 0)
					elseif ESPHighlight and target.Backpack:FindFirstChild("Gun") or target.Character:FindFirstChild("Gun") then
						ESPHighlight.FillColor = Color3.fromRGB(0, 0, 255)
					else
                        ESPHighlight.FillColor = Color3.fromRGB(0, 255, 0)
					end
				end

				JoinConnection = game.Players.PlayerAdded:Connect(function(player)
					DeathConnections[player] = player.CharacterAdded:Connect(function(char)
						task.wait(5)

						NewHighlight(char, player)
					end)
				end)

				DeathConnections[player] = target.CharacterAdded:Connect(function(char)
					task.wait(5)

					NewHighlight(char, player)
				end)
			end
		end
	end
	local function RemoveHighlights()
		if JoinConnection then JoinConnection:Disconnect() end
		
		for _,target in pairs(game.Players:GetPlayers()) do
			local Char = target and target.Character

			if Char then
				local Highlight = Char:FindFirstChild("ESPHighlight")
				local NameTag = Char:FindFirstChild("Head"):FindFirstChild("NameTag")
				
				if Highlight then
					Highlight:Destroy()
				end
				if NameTag then
					NameTag:Destroy()
				end
			end
		end
	end
	
	local function AutoFarmCoins()
		local localplayer = game.Players.LocalPlayer
		local char = localplayer and (localplayer.Character or localplayer.CharacterAdded:Wait())
		
		local TS = game:GetService("TweenService")
		
		if localplayer and char then
			local function GetCoinContainer()
				for _,model in pairs(workspace:GetDescendants()) do
					if model:IsA("Model") and model.Name == "CoinContainer" then
						return model
					end
				end
			end
			local function GetRandomCoin()
				local CoinContainer: Model = GetCoinContainer()
				
				if CoinContainer then
					local RandomCoin: BasePart = CoinContainer:GetChildren()[math.random(1, #CoinContainer:GetChildren())]
					
					if RandomCoin then
						local CFrameOfCoin = RandomCoin.CFrame
						
						if localplayer and char then
							local HRP: BasePart = char:FindFirstChild("HumanoidRootPart")
							
							if HRP then
								HRP.CFrame = CFrameOfCoin * CFrame.new(0, 1, 0)
								
								wait(1)
							end
						end
					else
						RandomCoin = CoinContainer:GetChildren()[math.random(1, #CoinContainer:GetChildren())]
					end
				end
			end
			
			while CoinAutoFarm == true and task.wait(1) do
				if CoinAutoFarm == false then
					break
				end
				
				if CoinAutoFarm == true then
					GetRandomCoin()
				else
					break
				end
			end
		end
	end

	local InnocentSection = Tab:CreateSection("Innocent")
	local ESPAll = Tab:CreateToggle({
		Name = "Role Chams",
		CurrentValue = false,
		Flag = "MM2ESP1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			
			ESPActivated = Value
			
			if Value then
				task.spawn(CreateHighlights)
			else
				task.spawn(RemoveHighlights)
			end
		end,
	})
	local AutoFarmCoinsToggle = Tab:CreateToggle({
		Name = "Auto farm coins",
		CurrentValue = false,
		Flag = "MM2CoinFarm1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)

			CoinAutoFarm = Value
			
			task.spawn(AutoFarmCoins)
		end,
	})
	--local GunESP = Tab:CreateToggle({
	--	Name = "Gun ESP",
	--	CurrentValue = false,
	--	Flag = "MM2ESP2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	--	Callback = function(Value)
	--		f:CheckVersion(Rayfield)
			
	--		GunESP = Value
			
	--		if GunESP then
	--			f:CheckVersion(Rayfield)

	--			while GunESP == true and task.wait() do
	--				local Gun

	--				for _,part in pairs(workspace:GetDescendants()) do
	--					if part:IsA("BasePart") and part.Name == "GunDrop" then
	--						Gun = part

	--						break
	--					end
	--				end

	--				if Gun then
	--					local Highlight = Instance.new("Highlight")
	--					Highlight.FillColor = Color3.fromRGB(0, 0, 200)
	--					Highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
	--					Highlight.OutlineTransparency = 0
	--					Highlight.Parent = Gun
	--				end
	--			end
	--		end
	--	end,
	--})
	local KillMurdererButton = Tab:CreateButton({
		Name = "Kill murderer",

		Callback = function()
			f:CheckVersion(Rayfield)
			
			if KillMurdererCooldown == false then
				KillMurdererCooldown = true

				local Character = game.Players.LocalPlayer.Character
				local Murderer: Player

				local Thrust = Instance.new("BodyAngularVelocity")
				Thrust.Parent = Character:FindFirstChild("HumanoidRootPart")
				Thrust.MaxTorque = Vector3.new(0,2^9999,0)
				Thrust.P = 2^9999
				local Thrust2 = Instance.new("BodyThrust")
				Thrust2.Parent = Character:FindFirstChild("HumanoidRootPart")
				Thrust2.Force = Vector3.new(500,0,500)

				for _,tplayer in pairs(game.Players:GetPlayers()) do
					if tplayer and tplayer.Character then
						local KnifeChar = tplayer.Character:FindFirstChild("Knife")
						local KnifeBackpack = tplayer.Backpack:FindFirstChild("Knife")

						if KnifeChar or KnifeBackpack then
							Murderer = tplayer

							break
						end
					end
				end

				Rayfield:Notify({
					Title = "Notification",
					Content = "Now targeting "..Murderer.Name.."...",
					Duration = 2.5
				})
				
				if Murderer.Name == game.Players.LocalPlayer.Name then
					Rayfield:Notify({
						Title = "Notification",
						Content = "Can't target yourself.",
						Duration = 2.5
					})
					
					Thrust:Destroy()
					Thrust2:Destroy()

					return
				end

				if Murderer == nil then
					KillMurdererCooldown = false
					Thrust:Destroy()
					Thrust2:Destroy()
					return
				end
				
				workspace.CurrentCamera.CameraSubject = Murderer.Character:FindFirstChildOfClass("Humanoid")

				while task.wait() do
					local MurdererChar = Murderer.Character

					--if not((MurdererChar or MurdererChar:FindFirstChild("HumanoidRootPart").CFrame) or (Character or Character:FindFirstChild("HumanoidRootPart").CFrame)) then
					--Thrust:Destroy()
					--break
					--end
					
					if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then
						break
					end

					if MurdererChar and Character and (MurdererChar:FindFirstChildOfClass("Humanoid").Health or Character:FindFirstChildOfClass("Humanoid").Health) <= 0 then
						break
					end

					local s, f = pcall(function()
						Character:FindFirstChild("HumanoidRootPart").CFrame = MurdererChar:FindFirstChild("HumanoidRootPart").CFrame
						Thrust2.Location = MurdererChar:FindFirstChild("HumanoidRootPart").Position
						Character:FindFirstChildOfClass("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Seated, true)

						Thrust.AngularVelocity = Vector3.new(0,9999,0)
						task.wait()
						Thrust.AngularVelocity = Vector3.new(0,0,0)
					end)

					if f then
						break
					end

					if not (Murderer.Character:FindFirstChild("Head")) then
						Thrust:Destroy()
						Thrust2:Destroy()
						break
					end

					game:FindService("RunService").Heartbeat:Wait()
				end
				Thrust:Destroy()
				Thrust2:Destroy()

				KillMurdererCooldown = false
			end
		end,
	})
	local GrabGun = Tab:CreateButton({
		Name = "Grab gun",

		Callback = function()
			f:CheckVersion(Rayfield)
			
			local Gun

			for _,part in pairs(workspace:GetDescendants()) do
				if part:IsA("BasePart") and part.Name == "GunDrop" then
					Gun = part

					break
				end
			end

			if Gun then
				local LPCharCFrame = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
				local LPChar = game.Players.LocalPlayer.Character

				Rayfield:Notify({
					Title = "Notification",
					Content = "Gun found dropped, grabbing...",
					Duration = 2.5
				})

				LPChar:FindFirstChild("HumanoidRootPart").CFrame = Gun.CFrame
				task.wait(0.175)
				LPChar:FindFirstChild("HumanoidRootPart").CFrame = LPCharCFrame

				Rayfield:Notify({
					Title = "Notification",
					Content = "Grabbed gun.",
					Duration = 2.5
				})
			end

			for _,tplayer in pairs(game.Players:GetPlayers()) do
				if tplayer and tplayer.Character then
					local GunChar = tplayer.Character:FindFirstChild("Gun")
					local GunBackpack = tplayer.Backpack:FindFirstChild("Gun")

					if GunChar or GunBackpack then
						Rayfield:Notify({
							Title = "Notification",
							Content = "Gun is already in a players inventory.",
							Duration = 2.5
						})

						break
					end
				end

				wait()
			end
		end,
	})
end

local UniversalAlreadyLoaded = false

function f.Universal(Window, Rayfield)
	local Tab = Window:CreateTab("Universal", nil)

	local EnabledWalk = false
	local EnabledJump = false

	local WalkToggle = Tab:CreateToggle({
		Name = "Walkspeed",
		CurrentValue = false,
		Flag = "WalkspeedToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			EnabledWalk = Value
		end,
	})
	local JumpToggle = Tab:CreateToggle({
		Name = "Jumppower",
		CurrentValue = false,
		Flag = "JumppowerToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)
			EnabledJump = Value
		end,
	})

	local WalkSpeedSlider = Tab:CreateSlider({
		Name = "Walkspeed",
		Range = {16, 500},
		Increment = 1,
		Suffix = "Walkspeed",
		CurrentValue = 16,
		Flag = "WalkspeedSlider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)

			if EnabledWalk then
				game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
			end
		end,
	})
	local JumpPowerSlider = Tab:CreateSlider({
		Name = "Jump power",
		Range = {50, 500},
		Increment = 1,
		Suffix = "JumpPower",
		CurrentValue = 50,
		Flag = "JumpPowerSlider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			f:CheckVersion(Rayfield)

			if EnabledJump then
				game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
			end
		end,
	})

	UniversalAlreadyLoaded = true
end

function f:LoadExtra(Window, Rayfield)
	local ChangelogTab = Window:CreateTab("Changelog", nil)
	local ExtraTab = Window:CreateTab("Extra", nil)
	local WhitelistedGamesTab = Window:CreateTab("Whitelisted Games", nil)
	
	local Date4_20_25 = ChangelogTab:CreateParagraph({
		Title = "Update - 4/20/25",
		Content = "It's been a bit since the last update, executors are back to working and my motivation for this project is higher now as it's just something I do when I'm bored. Anyways, update to 'Murder Mystery 2' script. Revamped ESP role highlight."
	})
	local Date12_24_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/24/24",
		Content = "'Murder Mystery 2' kill murderer is finished, some tweaks in future. Adding / completing the auto farm coins. Also finished role chams. (hopefully) Added whitelisted games tab so users can see the correct games that are whitelisted."
	})
	local Date12_21_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/21/24",
		Content = "'Murder Mystery 2' kill murderer has been updated high chance of actually killing the murderer (flings)"
	})
	local Date12_20_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/20/24",
		Content = "Added new whitelisted game, 'Murder Mystery 2'. Grab gun, kill murderer."
	})
	local Date12_19_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/19/24",
		Content = "Added new whitelisted game, 'Be a Hole'. Added collect everything to 'Be a Hole' tab. Made versions, lets you know if your hub is outdated."
	})
	local Date12_18_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/18/24",
		Content = "Added universal, finished 'Eat Blobs Simulator' scripts."
	})
	local Date_12_16_24 = ChangelogTab:CreateParagraph({
		Title = "Testing - 12/16/24",
		Content = "Everything in 'Eat Blobs Simulator' was starting to be made."
	})

	local LoadUniversalTabButton = ExtraTab:CreateButton({
		Name = "Load universals.",

		Callback = function()
			f:CheckVersion(Rayfield)
			
			if UniversalAlreadyLoaded == false then
				f.Universal(Window)
			else
				Rayfield:Notify({
					Title = "Notification",
					Content = "Already have a 'Universal' tab created.",
					Duration = 2.5
				})
			end
		end,
	})
	local UniversalButtonParagraph = ExtraTab:CreateParagraph({
		Title = "⚠WARNING⚠",
		Content = "Using the universal scripts inside of a game could and can get you banned from some games with anti-cheat."
	})
	
	local MPS = game:GetService("MarketplaceService")
	
	for _, gameplaceid in pairs(WhitelistedGamesTable) do
		local GameInformation = MPS:GetProductInfo(gameplaceid)
		
		if GameInformation then
			if GameInformation.AssetId ~= game.PlaceId then
				local GameTeleportButton = WhitelistedGamesTab:CreateButton({
					Name = GameInformation.Name,

					Callback = function()
						game:GetService("TeleportService"):Teleport(GameInformation.AssetId, game.Players.LocalPlayer)
					end,
				})
			end
		end
	end
end

function f:CheckVersion(Rayfield)
	if VersionCheckCooldown == false then
		VersionCheckCooldown = true

		local OldVersion = Version
		local NewVersion = loadstring(game:HttpGet('https://raw.githubusercontent.com/ChickenHUB1/ChickenHUB/refs/heads/main/Version'))()

		print("Old version is "..OldVersion.." and new version is "..NewVersion)

		if NewVersion ~= OldVersion then
			Rayfield:Notify({
				Title = "Version Notification",
				Content = "This is now an outdated version of ChickenHUB, please re-execute to get the newest version. You can still USE this version, there might be some bugs, or issues.",
				Duration = 10
			})
		end

		task.wait(30)

		VersionCheckCooldown = false
	else
		return
	end
end

function f:RunFunction(placeid, Window, Rayfield)
	if placeid then
		f["game"..placeid](Window, Rayfield)
	else
		Rayfield:Notify({
			Title = "PlaceID - ERROR",
			Content = "An internal error had occured. If this is reoccuring, contact script publishers.",
			Duration = 7.5
		})
		Rayfield:Notify({
			Title = "Notification",
			Content = "Now loading universal.",
			Duration = 7.5
		})

		f.Universal(Window, Rayfield)
	end

	f:LoadExtra(Window, Rayfield)
end

return f

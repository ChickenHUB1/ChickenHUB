local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local f = {}

function f.game8200787440(Window) -- eat blobs simulator
	local Tab = Window:CreateTab("Eat Blobs Simulator", nil) -- Title, Image
	local Enabled = false
	local KillAll = false
	
	local function CollectOrbs()
		if Enabled == false then
			return
		end
		
		while Enabled == true and wait() do
			for _,v in pairs(workspace.Orbs:GetChildren()) do
				if Enabled == false then
					break
				end

				if Enabled == true then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0, -1, 0)
					wait(0.1)
				else
					break
				end
			end
		end
	end
	
	local function KillAllFunc()
		if KillAll == false then
			return
		end

		while KillAll == true and wait() do
			for _, v in pairs(game.Players:GetPlayers()) do
				local Character = v.Character
				local HRP = Character:FindFirstChild("HumanoidRootPart")
				
				if KillAll == false then
					break
				end

				if Character and HRP then
					local RealSizeValue = HRP:FindFirstChild("RealSize")

					if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("RealSize").Value > RealSizeValue.Value then
						game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = HRP.CFrame
					end
				end

				wait(0.25)
			end
		end
	end
	
	local AutoCollectOrbsToggle = Tab:CreateToggle({
		Name = "Auto Collect Orbs",
		CurrentValue = false,
		Flag = "CollectOrbsToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			Enabled = Value
			
			if Enabled then
				Rayfield:Notify({
					Title = "Notification",
					Content = "Activated.",
					Duration = 2.5
				})
			else
				Rayfield:Notify({
					Title = "Notification",
					Content = "Deactivated.",
					Duration = 2.5
				})
			end
			
			CollectOrbs()
		end,
	})
	local KillAllToggle = Tab:CreateToggle({
		Name = "Kill All",
		CurrentValue = false,
		Flag = "KillAllToggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			KillAll = Value
			
			--print(KillAll, Value)

			KillAllFunc()
		end,
	})
	
	local Slider = Tab:CreateSlider({
		Name = "Walkspeed",
		Range = {16, 500},
		Increment = 1,
		Suffix = "Walkspeed",
		CurrentValue = 16,
		Flag = "WalkspeedSlider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value   -- The variable (Value) is a number which correlates to the value the slider is currently at
		end,
	})
end

function f.game18180213499(Window)
	local Tab = Window:CreateTab("Be a Hole", nil)
	
	local CollectEverything = Tab:CreateButton({
		Name = "Collect everything",
		
		Callback = function()
			local player = game.Players.LocalPlayer
			local character = player.Character
			
			if player and character then
				character:FindFirstChild("Size").Value = 999999999999999999999999999
			end
		end,
	})
end

function f.Universal(Window)
	local Tab = Window:CreateTab("Universal", nil)
	
	local WalkSpeedSlider = Tab:CreateSlider({
		Name = "Walkspeed",
		Range = {16, 500},
		Increment = 1,
		Suffix = "Walkspeed",
		CurrentValue = 16,
		Flag = "WalkspeedSlider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value   -- The variable (Value) is a number which correlates to the value the slider is currently at
		end,
	})
	
	local JumpPowerSlider = Tab:CreateSlider({
		Name = "Jump power",
		Range = {50, 500},
		Increment = 1,
		Suffix = "JumpPower",
		CurrentValue = 50,
		Flag = "JumpPowerSlider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value   -- The variable (Value) is a number which correlates to the value the slider is currently at
		end,
	})
end

function f:LoadAdded(Window)
	local ChangelogTab = Window:CreateTab("Changelog", nil)
	
	local Date_12_16_24 = ChangelogTab:CreateParagraph({
		Title = "Testing - 12/16/24",
		Content = "Everything in 'Eat Blobs Simulator' was starting to be made."
	})
	local Date12_18_24 = ChangelogTab:CreateParagraph({
		Title = "Update - 12/18/24",
		Content = "Added universal, finished 'Eat Blobs Simulator' scripts."
	})
end

function f:RunFunction(placeid, Window)
	if placeid then
		f["game"..placeid](Window)
	else
		Rayfield:Notify({
			Title = "PlaceID - ERROR",
			Content = "An internal error had occured. If this is reoccuring, contact script publishers.",
			Duration = 7.5
		})
		Rayfield:Notify({
			Title = "Notification",
			Content = "Now loading universal.",
			Duration = 57.5
		})
		
		f.Universal(Window)
	end
	
	f:LoadAdded(Window)
end

return f
